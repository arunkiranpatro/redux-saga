{"version":3,"sources":["webpack:///./src/components/UILibrary/Layout.js","webpack:///./src/components/utils/Debounce.js","webpack:///./src/components/UILibrary/AutoComplete.js","webpack:///./src/components/SampleComponent.js"],"names":["Layout","props","tempColumnName","className","columns","mainBody","rows","rowNum","myChildren","React","children","containerClassName","Number","parseInt","length","i","columnClassName","rowClassName","push","key","propTypes","PropTypes","func","delay","inDebounce","context","this","args","arguments","clearTimeout","setTimeout","apply","initalState","searchText","isLoading","results","reducer","state","action","type","payload","Error","AutoComplete","body","useReducer","dispatch","searchField","useRef","_search","debounce","query","current","value","resultPromise","getResults","then","result","onSelect","e","target","innerHTML","onChange","ref","Loading","map","index","id","onClick","x","list","Promise","resolve","reject","filter","search","SampleComponent"],"mappings":"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","file":"639.bundle.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Layout(props) {\n    let { className, columns } = props;\n    let mainBody = [];\n    let rows = [];\n    let tempColumnName;\n    let rowNum = 1;\n    const myChildren = React.Children.toArray(props.children);\n    className = className || '';\n    const containerClassName = `row-col-container ${className}`;\n    columns = Number.parseInt(columns, 10);\n    if (myChildren.length <= 0) {\n        return null;\n    }\n    mainBody = [];\n    rows = [];\n    tempColumnName = `${12 / columns}`;\n    rowNum = 1;\n    for (let i = 1; i <= myChildren.length; i++) {\n        let columnClassName = `column-${tempColumnName} ${className}-column-`;\n        let rowClassName = `${'row' + ' '}${className}-row-`;\n        columnClassName += i;\n\n        /* push all columns for each row */\n        rows.push(\n          <div className={columnClassName} key={columnClassName}>\n            {myChildren[i - 1]}\n          </div>\n        );\n        /** suppose children =5 and columns=2  */\n        if (i % columns === 0 || i === myChildren.length) {\n            rowClassName += rowNum;\n            mainBody.push(\n              <div className={rowClassName} key={`row${i}`}>\n                {rows}\n              </div>\n            );\n            rowNum++;\n            rows = [];\n        }\n    }\n    return <div className={containerClassName}>{mainBody}</div>;\n}\n\nLayout.propTypes = {\n    className: PropTypes.string,\n    columns: PropTypes.number,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node,\n    ]),\n};\n\nexport default Layout;\n","function debounce(func, delay) {\n    let inDebounce;\n    return function innerDebounce() {\n        const context = this;\n        const args = arguments;\n        clearTimeout(inDebounce);\n        inDebounce = setTimeout(function runFunc() {\n            func.apply(context, args);\n        }, delay);\n    };\n}\n\nexport default debounce;\n","import React, { useReducer, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Loading from \"./Loading\";\nimport debounce from \"../utils/Debounce\";\n\nconst initalState = {\n  searchText: \"\",\n  isLoading: false,\n  results: []\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"SET_LOADING\":\n      return {\n        ...state,\n        isLoading: true,\n        results: [],\n        searchText: action.payload\n      };\n    case \"FETCH_COMPLETE\":\n      return { ...state, isLoading: false, results: action.payload };\n    case \"SET_SEARCH_TEXT\":\n      return { ...state, searchText: action.payload, results: [] };\n    default:\n      throw new Error();\n  }\n}\n\nfunction AutoComplete(props) {\n  const [state, dispatch] = useReducer(reducer, initalState);\n  const { delay = 500 } = props;\n  const { isLoading, results, searchText } = state;\n  const searchField = useRef(\"\");\n  const _search = useRef(debounce(search, delay)).current;\n\n  function onChangeAC(e) {\n    dispatch({ type: \"SET_SEARCH_TEXT\", payload: e.target.value });\n    _search();\n  }\n\n  function search() {\n    const query = searchField.current.value;\n    if (query !== \"\") {\n      dispatch({ type: \"SET_LOADING\", payload: query });\n      const resultPromise = props.getResults(query);\n      if (\n        resultPromise !== null &&\n        (typeof resultPromise === \"object\" ||\n          typeof resultPromise === \"function\") &&\n        typeof resultPromise.then === \"function\"\n      ) {\n        resultPromise.then(result => {\n          dispatch({ type: \"FETCH_COMPLETE\", payload: result });\n        });\n      } else {\n        dispatch({ type: \"FETCH_COMPLETE\", payload: [] });\n      }\n    }\n  }\n\n  function onSelect(e) {\n    dispatch({ type: \"SET_SEARCH_TEXT\", payload: e.target.innerHTML });\n  }\n\n  function renderResults() {\n    let body = \"\";\n    if (results.length > 0) {\n      body = (\n        <div className=\"autocomplete-results\">\n          {results.map((result, index) => (\n            <div\n              className=\"autocomplete-results-row\"\n              key={index}\n              id={`ac-results-${index}`}\n              onClick={onSelect}\n            >\n              {result}\n            </div>\n          ))}\n        </div>\n      );\n    }\n    return body;\n  }\n\n  return (\n    <div className=\"autocomplete-container\">\n      <input\n        type=\"text\"\n        onChange={onChangeAC}\n        value={searchText}\n        ref={searchField}\n      />\n      {isLoading && <Loading />}\n      {renderResults()}\n    </div>\n  );\n}\n\nAutoComplete.propTypes = {\n  getResults: PropTypes.func.isRequired,\n  delay: PropTypes.number\n};\n\nexport default AutoComplete;\n","import React from 'react';\nimport Layout from './UILibrary/Layout';\nimport AutoComplete from './UILibrary/AutoComplete';\n\nfunction getResults(x) {\n    const list = ['arun', 'ramya', 'ram', 'wk'];\n    const p = new Promise(function(resolve, reject) {\n        setTimeout(function() {\n            const results = list.filter(value => {\n                if (value.search(x) != -1) {\n                    return true;\n                }\n                return false;\n            });\n            resolve(results);\n        }, 1000);\n    });\n\n    return p;\n}\n\nexport default function SampleComponent() {\n    return (\n      <Layout columns={1}>\n        Hello Dynamic Container\n        <AutoComplete getResults={getResults} />\n      </Layout>\n    );\n}\n"],"sourceRoot":""}